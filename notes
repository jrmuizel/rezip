infgen

current stream format:
0: literal:
1-0x80: a 2 byte value that is either a distance or stop code
        if it's a length we also read a byte of length

possible format:
0: 1 literal byte
1-0x80: a 2 byte value that is a distance
0x81-0xfe: we can distribute these for shorter distances and runs of literals

it would be interesting to experiment with not outputing the full file
and instead just outputing in place. here's a possible format:
0: 1 literal byte follows
1-0x80: a 2 byte value that is a distance
0x81-0xfe: 2-n literal bytes follow

we could also copy the encoding that snappy uses as we're doing
basically the same thing

lz4 format:

token == > 4-high bits : literal length / 4-low-bits : match length

token   | literal length + (optional) | literals | offset | match length + (optional)
1 bytes        0-n bytes                0-L bytes  2-bytes       0-n bytes

offset = 0-65535

snappy format:

2 bits
00 = literal - 6 bits (len-1), up to 60
     60 = 1 bytes of length
     61 = 2 bytes
     62 = 3 bytes
     63 = 4 bytes 
01 = copy with 1-byte offset, lengths (4..1) bytes, offset (0..2057)
01 = copy with 2-byte offset, lengths (1..64) bytes, offsets (0..65535)
01 = copy with 4-byte offset, lengths (1..64) bytes, offsets (0..2^32-1)


More efficient encoding:
 - one thing we can do to simply decrease the entropy is to encode the match
   number instead of the match offset. If we keep the existing length, this
   should often identify the match with a low number. In fact, the match
   should nearly always be the first one, because a latter one should
   nearly always be more expensive to encode.
   This did indeed cut the diff size by 3x
 - We can perhaps do even better by counting match offsets and lengths.
   This is significantly harder because we need to order these somehow
   This will basically require a full lz matcher to implement efficiently.

 Similar projects:
  reflate http://encode.ru/threads/1399-reflate-a-new-universal-deflate-recompressor/page2

Sliding window:
 - it looks like lz4 doesn't really slide it just limits block sizes to
   available memory?
 - gzip: puff uses an in memory window
         inflate.c uses logic and an occasional window update
         inflate_fast seems to use logic to copy from a circular buffer
         in pieces
